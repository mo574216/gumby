global backtrace, ioWriteCounter, filehandles, times, doesIO, tmp;
global i;

global filesWritten;
function getPyBacktrace(currentTid)
{
	pyBacktrace = "";
	index = 0;
	foreach ([tid, i2-] in backtrace) {
		if(index < 20 & tid == currentTid)
		{
			if(isinstr(backtrace[tid, i2], "/home/user/src/tribler/Tribler/"))
				str = substr(backtrace[tid, i2], 30, strlen(backtrace[tid, i2]));
			else
				str = backtrace[tid, i2];


			if(isinstr(str, "/home/user/python-src/virtualenv-attempt/inst/"))
				str = substr(str, 45, strlen(str));

			pyBacktrace = sprintf("%s<-%s (%d)", pyBacktrace, str, doesIO[tid, i2]);
			index += 1;
		}
	}
	return pyBacktrace;
}


probe python.function.entry
{
	i[tid()] += 1
	backtrace[tid(), i[tid()]] = sprintf("%s:%s", filename, funcname);
	doesIO[tid(), i[tid()]] = 0;
	// print IN file_mem lineno
}

probe python.function.return
{
	if(i[tid()] > 0)
	{
		foreach ([tid, fd] in ioWriteCounter)
		{
			if(tid == tid() && ioWriteCounter[tid, fd] > 0)
			{
				bt = getPyBacktrace(tid());
				//execTime =  gettimeofday_us()-times[tid(), funcname];
				// disable execTime as it is not accurate here anyway
				execTime = 0;

				printf("%d,WRITE,%s,%s,%d,%s,%d\n", gettimeofday_us(), filehandles[tid, fd], bt, ioWriteCounter[tid(), fd], task_execname(pid2task(pid())), execTime );

				tmp[fd] = 1;
			}


		}

		foreach([fd] in tmp)
		{
			delete ioWriteCounter[tid(), fd];
		}
		
		delete tmp;
		delete backtrace[tid(), i[tid()]];
		i[tid()] -= 1

		// print OUT file_mem lineno bytes_out newline
	}

}

probe syscall.open.return
{
	fd = $return;
	filehandles[tid(), fd] = sprintf("%s", user_string($filename));	
}

probe syscall.write.return {
	if ($return>0) {
		doesIO[tid(), i[tid()]] = 1;
		ioWriteCounter[tid(), $fd] += $return;

	}
}

/*
probe syscall.read.return {
	if ($return>0) {
		ioReadCounter[tid(), i[tid()]] += $return;
	}
}
*/
probe begin {
	printf("\"TIMESTAMP\",\"TYPE\",\"FILE\",\"TRACE\",\"BYTES\",\"PROCESS\",\"TIME\"\n");
}

probe end {
 // print mapping fd -> filename
}

/*
probe timer.s(600)
{
	exit()
}*/


